# git-tips
# https://github.com/git-tips/tips

## Everyday Git in twenty commands or so
git help everyday

## Show helpful guides that come with Git
git help -g

## Overwrite pull
git fetch --all && git reset --hard origin/master

## List of all files till a commit
git ls-tree --name-only -r <commit-ish>

## Git reset first commit
git update-ref -d HEAD

## List all the conflicted files
git diff --name-only --diff-filter=U

## List of all files changed in a commit
git diff-tree --no-commit-id --name-only -r <commit-ish>

## Unstaged changes since last commit
git diff

## Changes staged for commit
git diff --cached

## Show both staged and unstaged changes
git diff HEAD

## List all branches that are already merged into master
git checkout master && git branch --merged

## Quickly switch to the previous branch
git checkout -

## Remove branches that have already been merged with master
git branch --merged | grep -v '\*' | xargs -n 1 git branch -d

## List all branches and their upstreams, as well as last commit on branch
git branch -vv

## Track upstream branch
git branch -u origin/mybranch

## Delete local branch
git branch -d <local_branchname>

## Delete remote branch
git push origin --delete <remote_branchname>
git push origin :<remote_branchname>

## Undo local changes with the last content in head
git checkout -- <file_name>

## Revert: Undo a commit by creating a new commit
git revert <commit-ish>

## Reset: Discard commits, advised for private branch
git reset <commit-ish>

## Reword the previous commit message
git commit -v --amend

## Amend author.
git commit --amend --author='Author Name <email@address.com>'

## Reset author, after author has been changed in the global config.
git commit --amend --reset-author --no-edit

## Changing a remote's URL
git remote set-url origin <URL>

## Get list of all remote references
git remote
git remote show

## Get list of all local and remote branches
git branch -a

## Get only remote branches
git branch -r

## Stage parts of a changed file, instead of the entire file
git add -p

## Get git bash completion
curl http://git.io/vfhol > ~/.git-completion.bash && echo '[ -f ~/.git-completion.bash ] && . ~/.git-completion.bash' >> ~/.bashrc

## What changed since two weeks?
git whatchanged --since='2 weeks ago'

## See all commits made since forking from master
git log --no-merges --stat --reverse master..

## Pick commits across branches using cherry-pick
git checkout <branch-name> && git cherry-pick <commit-ish>

## Find out branches containing commit-hash
git branch -a --contains <commit-ish>
git branch --contains <commit-ish>

## Git Aliases
git config --global alias.<handle> <command>
git config --global alias.st status

## Saving current state of tracked files without commiting
git stash
git stash save

## Saving current state including untracked files
git stash save -u
git stash save --include-untracked

## Show list of all saved stashes
git stash list

## Apply any stash without deleting from the stashed list
git stash apply <stash@{n}>

## Apply last stashed state and delete it from stashed list
git stash pop
git stash apply stash@{0} && git stash drop stash@{0}

## Delete all stored stashes
git stash clear
git stash drop <stash@{n}>

## Grab a single file from a stash
git checkout <stash@{n}> -- <file_path>
git checkout stash@{0} -- <file_path>

## Show all tracked files
git ls-files -t

## Show all untracked files
git ls-files --others

## Show all ignored files
git ls-files --others -i --exclude-standard

## Create new working tree from a repository (git 2.5)
git worktree add -b <branch-name> <path> <start-point>

## Create new working tree from HEAD state
git worktree add --detach <path> HEAD

## Untrack files without deleting
git rm --cached <file_path>
git rm --cached -r <directory_path>

## Before deleting untracked files/directory, do a dry run to get the list of these files/directories
git clean -n

## Forcefully remove untracked files
git clean -f

## Forcefully remove untracked directory
git clean -f -d
git clean -df

## Update all the submodules
git submodule foreach git pull

## Show all commits in the current branch yet to be merged to master
git cherry -v master
git cherry -v master <branch-to-be-merged>

## Rename a branch
git branch -m <new-branch-name>
git branch -m [<old-branch-name>] <new-branch-name>

## rebases 'feature' to 'master' and merges it in to master
git checkout feature && git rebase @{-1} && git checkout @{-2} && git merge @{-1}

## Archive the `master` branch
git archive master --format=zip --output=master.zip

## Modify previous commit without modifying the commit message
git add --all && git commit --amend --no-edit

## Prunes references to remote branches that have been deleted in the remote.
git fetch -p
git remote prune origin

## Retrieve the commit hash of the initial revision.
 git rev-list --reverse HEAD | head -1

## Visualize the version tree.
git log --pretty=oneline --graph --decorate --all
gitk --all

## Deploying git tracked subfolder to gh-pages
git subtree push --prefix subfolder_name origin gh-pages

## Adding a project to repo using subtree
git subtree add --prefix=<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.git master

## Get latest changes in your repo for a linked project using subtree
git subtree pull --prefix=<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.git master

## Export a branch with history to the a file.
git bundle create <file> <branch-name>

## Import from a bundle
git clone repo.bundle <repo-dir> -b <branch-name>

## Get the name of current branch.
git rev-parse --abbrev-ref HEAD

## Ignore one file on commit (e.g. Changelog).
git update-index --assume-unchanged Changelog; git commit -a; git update-index --no-assume-unchanged Changelog

## Stash changes before rebasing
git rebase --autostash

## Fetch pull request by ID to a local branch
git fetch origin pull/<id>/head:<branch-name>
git pull origin pull/<id>/head:<branch-name>

## Show the most recent tag on the current branch.
git describe --tags --abbrev=0

## Show inline word diff.
git diff --word-diff

## Donâ€™t consider changes for tracked file.
git update-index --assume-unchanged <file_name>

## Undo assume-unchanged.
git update-index --no-assume-unchanged <file_name>

## Clean the files from `.gitignore`.
git clean -X -f

## Restore deleted file.
git checkout <deleting_commit>^ -- <file_path>

## Restore file to a specific commit-hash
git checkout <commit-ish> -- <file_path>

## Always rebase instead of merge on pull.
git config --global branch.autosetuprebase always

## List all the alias and configs.
git config --list

## Make git case sensitive.
git config --global core.ignorecase false

## Auto correct typos.
git config --global help.autocorrect 1

## Check if the change was a part of a release.
git name-rev --name-only <SHA-1>

## Dry run. (any command that supports dry-run flag should do.)
git clean -fd --dry-run

## Marks your commit as a fix of a previous commit.
git commit --fixup <SHA-1>

## squash fixup commits normal commits.
git rebase -i --autosquash

## skip staging area during commit.
git commit -am <commit message>

## List ignored files.
git check-ignore *

## Status of ignored files.
git status --ignored

## Commits in Branch1 that are not in Branch2
git log Branch1 ^Branch2

## reuse recorded resolution, record and reuse previous conflicts resolutions.
git config --global rerere.enabled 1

## Open all conflicted files in an editor.
git diff --name-only | uniq | xargs $EDITOR

## Count unpacked number of objects and their disk consumption.
git count-objects --human-readable

## Prune all unreachable objects from the object database.
git gc --prune=now --aggressive

## Instantly browse your working repository in gitweb.
git instaweb [--local] [--httpd=<httpd>] [--port=<port>] [--browser=<browser>]

## View the GPG signatures in the commit log
git log --show-signature

## Remove entry in the global config.
git config --global --unset <entry-name>

## Checkout a new branch without any history
git checkout --orphan <branch_name>

## File diff between staging and the last file version.
git diff --staged

## Extract file from another branch.
git show <banch_name>:<file_name>

## List only the root and merge commits.
git log --first-parent

## Merge previous two commits into one.
git rebase --interactive HEAD~2
